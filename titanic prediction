Python 3.13.1 (tags/v3.13.1:0671451, Dec  3 2024, 19:06:28) [MSC v.1942 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
#install required libraries
#import the libraries
>>> import pandas as pd
>>> import numpy as np

>>> imoport matplotlib as ptb
>>>  #import  machine learning libraries
>>> from sklearn.model_selection import train_test_split
>>> from sklearn.linear_model import LinearRegression
>>> from sklearn.metrics import mean_squared_error, r2_score
>>> dl=pd.read_csv(r"C:\Users\USER\Desktop\data science\Titanic-Dataset.csv")
>>> print(dl.head())

   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked
0            1         0       3  ...   7.2500   NaN         S
1            2         1       1  ...  71.2833   C85         C
2            3         1       3  ...   7.9250   NaN         S
3            4         1       1  ...  53.1000  C123         S
4            5         0       3  ...   8.0500   NaN         S

[5 rows x 12 columns]
>>> print(dl.describe())
       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare
count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000
mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208
std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429
min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000
25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400
50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200
75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000
max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200

[8 rows x 7 columns]
# checking and handling missing data
missing_data=dl.isnull().sum()
print(missing_data)
PassengerId      0
Survived         0
Pclass           0
Name             0
Sex              0
Age            177
SibSp            0
Parch            0
Ticket           0
Fare             0
Cabin          687
Embarked         2
dtype: int64
# handling missing data
# 3 columns with missing values: Age, Cabin & Embarked
#drop column "Cabin"
dl_data=dl.drop(columns="Cabin", axis=1)
#impute values with mean
dl_data['Age']= dl_data['Age'].fillna(dl_data['Age'].mean())
File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\nanops.py", line 719, in nanmean
    the_sum = values.sum(axis, dtype=dtype_sum)
# drop 2 enpty rows of column"Embarked"
dl_data.dropna(subset=['Embarked'], axis=0, inplace=True)
# drop unnecessary columns,('name','ticket')
dl_data=dl.drop(columns=[ "Name","Ticket"])
   print(dl_data.head())
                
   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked
0            1         0       3    male  22.0      1      0   7.2500        S
1            2         1       1  female  38.0      1      0  71.2833        C
2            3         1       3  female  26.0      0      0   7.9250        S
3            4         1       1  female  35.0      1      0  53.1000        S
4            5         0       3    male  35.0      0      0   8.0500        S            

  print(dl_data.describe())
                
       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare
count   889.000000  889.000000  889.000000  ...  889.000000  889.000000  889.000000
mean    446.000000    0.382452    2.311586  ...    0.524184    0.382452   32.096681
std     256.998173    0.486260    0.834700  ...    1.103705    0.806761   49.697504
min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000
25%     224.000000    0.000000    2.000000  ...    0.000000    0.000000    7.895800
50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200
75%     668.000000    1.000000    3.000000  ...    1.000000    0.000000   31.000000
max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200

[8 rows x 7 columns]
           
# check if missing values have been handled
missing_data=dl_data.isnull().sum()
print(missing_data)
missing_data=dl_data.isnull().sum()
                
print(missing_data)
                
PassengerId    0
Survived       0
Pclass         0
Sex            0
Age            0
SibSp          0
Parch          0
Fare           0
Embarked       0
dtype: int64

#split the cleaned data into training and testing data
#handle the categorical variables
dl_data['Sex'] = dl_data['Sex'].map({'male': 0, 'female': 1})
                dl_data['Embarked'] = dl_data['Embarked'].map({'C': 0, 'S': 1, 'Q': 2})
                features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
                X = dl_data[features]
y = dl_data['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
                   X = dl_data[features]
y = dl_data['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
                model = LinearRegression()
model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2}")
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Prices")
plt.show()
print("Model coefficients:", model.coef_)
