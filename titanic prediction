Python 3.13.1 (tags/v3.13.1:0671451, Dec  3 2024, 19:06:28) [MSC v.1942 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> import pandas as pd
>>> import matplotlib as ptb
>>> import scikit_learn # machine learning library
Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    import scikit_learn # machine learning library
ModuleNotFoundError: No module named 'scikit_learn'
>>> # install libraries first before imprting
>>> import numpy as np
>>> from sklearn.model_selection import train_test_split
>>> from sklearn.linear_model import LinearRegression
>>> from sklearn.metrics import mean_squared_error, r2_score
>>> dl=pn.read_csv(r"C:\Users\USER\Desktop\data science\Titanic-Dataset.csv")
Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    dl=pn.read_csv(r"C:\Users\USER\Desktop\data science\Titanic-Dataset.csv")
NameError: name 'pn' is not defined
>>> dl=pd.read_csv(r"C:\Users\USER\Desktop\data science\Titanic-Dataset.csv")
>>> print(dl.head())
   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked
0            1         0       3  ...   7.2500   NaN         S
1            2         1       1  ...  71.2833   C85         C
2            3         1       3  ...   7.9250   NaN         S
3            4         1       1  ...  53.1000  C123         S
4            5         0       3  ...   8.0500   NaN         S

[5 rows x 12 columns]
>>> print(dl.describe())
       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare
count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000
mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208
std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429
min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000
25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400
50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200
75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000
max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200

[8 rows x 7 columns]
# checking and handling missing data
missing_data=dl.isnull().sum()
print missing_data
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
print(missing_data)
PassengerId      0
Survived         0
Pclass           0
Name             0
Sex              0
Age            177
SibSp            0
Parch            0
Ticket           0
Fare             0
Cabin          687
Embarked         2
dtype: int64
# handling missing data
column_mean=dl['Age'].mean()
dl['Age'].fillna(column_mean, inplace=True)

Warning (from warnings module):
  File "<pyshell#18>", line 1
FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


print(dl)
     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked
0              1         0       3  ...   7.2500   NaN         S
1              2         1       1  ...  71.2833   C85         C
2              3         1       3  ...   7.9250   NaN         S
3              4         1       1  ...  53.1000  C123         S
4              5         0       3  ...   8.0500   NaN         S
..           ...       ...     ...  ...      ...   ...       ...
886          887         0       2  ...  13.0000   NaN         S
887          888         1       1  ...  30.0000   B42         S
888          889         0       3  ...  23.4500   NaN         S
889          890         1       1  ...  30.0000  C148         C
890          891         0       3  ...   7.7500   NaN         Q

[891 rows x 12 columns]
dl = dl.fillna(dl.mean())
Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    dl = dl.fillna(dl.mean())
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\frame.py", line 11693, in mean
    result = super().mean(axis, skipna, numeric_only, **kwargs)
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\generic.py", line 12420, in mean
    return self._stat_function(
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\generic.py", line 12377, in _stat_function
    return self._reduce(
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\frame.py", line 11562, in _reduce
    res = df._mgr.reduce(blk_func)
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\internals\managers.py", line 1500, in reduce
    nbs = blk.reduce(func)
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\internals\blocks.py", line 404, in reduce
    result = func(self.values)
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\frame.py", line 11481, in blk_func
    return op(values, axis=axis, skipna=skipna, **kwds)
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\nanops.py", line 147, in f
    result = alt(values, axis=axis, skipna=skipna, **kwds)
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\nanops.py", line 404, in new_func
    result = func(values, axis=axis, skipna=skipna, mask=mask, **kwargs)
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\pandas\core\nanops.py", line 719, in nanmean
    the_sum = values.sum(axis, dtype=dtype_sum)
  File "C:\Users\USER\AppData\Roaming\Python\Python313\site-packages\numpy\_core\_methods.py", line 52, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
TypeError: unsupported operand type(s) for +: 'int' and 'str'
